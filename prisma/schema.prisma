generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url               = env("MONGODB_URI")
}

model Level {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    formerRank  Int?
    list        Record[]
    name        String
    position    Int
    publisher   String
    removalDate String?
    removalReason String?
    ytcode      String
    packs Pack[]
    weekly Weekly?
    @@map(name: "levels")
}

model Platformer {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    formerRank  Int?
    list        Record[]
    name        String
    position    Int
    publisher   String
    removalDate String?
    removalReason String?
    ytcode      String
    packs Pack[]
    weekly Weekly?
    @@map(name: "platformers")
}

model Record {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    beaten_when_weekly Boolean?
    levelId String @db.ObjectId
    level           Level?  @relation(fields: [levelId], references: [id])
    platformer           Platformer?  @relation(fields: [levelId], references: [id])
    link             String
    playerId String @db.ObjectId
    player Player @relation(fields: [playerId], references: [id])
    verification     Boolean?
    time String?

    @@unique([levelId, playerId])
    @@map(name: "records")
}

model Player {
   id     String @id @default(auto()) @map("_id") @db.ObjectId
   accountId String?
    records Record[]
    name String
    nationality String?
    abbr String?

    @@map(name: "players")
}

model Pack {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name String
   levelId String @db.ObjectId
    level Level? @relation(fields: [levelId], references: [id])
    platformer Platformer? @relation(fields: [levelId], references: [id])
    color String
    position Int

    @@map(name: "packs")
}

model Weekly {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    date Int
    color String
    levelId String @unique @db.ObjectId
    level Level? @relation(fields: [levelId], references: [id])
    platformer Platformer? @relation(fields: [levelId], references: [id])

    @@map(name: "weekly")
}

model Submission {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    level String
    publisher String
    player String
    link String
    comments String
    createdAt DateTime
    editedAt DateTime
    userId String @db.ObjectId
    status Int
    reason String?
    type String
    time String?

    @@map(name: "submissions")
}

model Cooldown {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    req Int
    userId String @db.ObjectId @unique
    createdAt DateTime

    @@map(name: "cooldowns")
}